{"version":3,"sources":["components/user/login.js","components/user/feed.js","routes.js","serviceWorker.js","index.js"],"names":["SignIn","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","redirectToReferrer","handleSubmit","bind","assertThisInitialized","event","_this2","preventDefault","data","FormData","target","fetch","method","body","then","response","status","setState","alert","classes","react_default","a","createElement","Redirect","to","className","main","CssBaseline_default","Paper_default","paper","Avatar_default","avatar","Typography_default","component","variant","form","onSubmit","FormControl_default","margin","required","fullWidth","InputLabel_default","htmlFor","Input_default","id","name","autoComplete","autoFocus","type","FormControlLabel_default","control","Checkbox_default","value","color","label","Button_default","submit","React","Component","withStyles","theme","defineProperty","width","display","marginLeft","spacing","unit","marginRight","breakpoints","up","marginTop","flexDirection","alignItems","padding","concat","backgroundColor","palette","secondary","Feed","Routes","BrowserRouter","Route","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","routes","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2ZAgDMA,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAAEC,oBAAoB,GACnCR,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAHHA,4EAMNY,GAAO,IAAAC,EAAAV,KAClBS,EAAME,iBACN,IAAMC,EAAO,IAAIC,SAASJ,EAAMK,QAEhCC,MAAM,aAAc,CAClBC,OAAQ,OACRC,KAAML,IACLM,KACD,SAAAC,GAAQ,OAAIA,EAASC,SACrBF,KAAK,SAAAE,GACO,MAATA,EACDV,EAAKW,SAAS,CAAEhB,oBAAoB,IAEpCiB,MAAM,4CAKH,IACCC,EAAYvB,KAAKJ,MAAjB2B,QACR,OAAGvB,KAAKI,MAAMC,mBAA2BmB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,GAAG,UAEpDJ,EAAAC,EAAAC,cAAA,QAAMG,UAAWN,EAAQO,MACvBN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,MACAD,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAOI,UAAWN,EAAQU,OACxBT,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQI,UAAWN,EAAQY,SAE3BX,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAYY,UAAU,KAAKC,QAAQ,MAAnC,WAGAd,EAAAC,EAAAC,cAAA,QAAMG,UAAWN,EAAQgB,KAAMC,SAAUxC,KAAKM,cAC5CkB,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CAAaiB,OAAO,SAASC,UAAQ,EAACC,WAAS,GAC7CpB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CAAYqB,QAAQ,SAApB,iBACAtB,EAAAC,EAAAC,cAACqB,EAAAtB,EAAD,CAAOuB,GAAG,QAAQC,KAAK,QAAQC,aAAa,QAAQC,WAAS,KAE/D3B,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CAAaiB,OAAO,SAASC,UAAQ,EAACC,WAAS,GAC7CpB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CAAYqB,QAAQ,YAApB,YACAtB,EAAAC,EAAAC,cAACqB,EAAAtB,EAAD,CAAOwB,KAAK,WAAWG,KAAK,WAAWJ,GAAG,WAAWE,aAAa,sBAEpE1B,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CACE6B,QAAS9B,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,CAAU+B,MAAM,WAAWC,MAAM,YAC1CC,MAAM,gBAERlC,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,CACE2B,KAAK,SACLR,WAAS,EACTN,QAAQ,YACRmB,MAAM,UACN5B,UAAWN,EAAQqC,QALrB,qBAlDSC,IAAMC,WAsEZC,MAtGA,SAAAC,GAAK,MAAK,CACvBlC,KAAKhC,OAAAmE,EAAA,EAAAnE,CAAA,CACHoE,MAAO,OACPC,QAAS,QACTC,WAAiC,EAArBJ,EAAMK,QAAQC,KAC1BC,YAAkC,EAArBP,EAAMK,QAAQC,MAC1BN,EAAMQ,YAAYC,GAAG,IAA2B,EAArBT,EAAMK,QAAQC,KAAW,GAAK,CACxDJ,MAAO,IACPE,WAAY,OACZG,YAAa,SAGjBtC,MAAO,CACLyC,UAAgC,EAArBV,EAAMK,QAAQC,KACzBH,QAAS,OACTQ,cAAe,SACfC,WAAY,SACZC,QAAO,GAAAC,OAA0B,EAArBd,EAAMK,QAAQC,KAAnB,OAAAQ,OAAsD,EAArBd,EAAMK,QAAQC,KAA/C,OAAAQ,OAAkF,EAArBd,EAAMK,QAAQC,KAA3E,OAETnC,OAAQ,CACNO,OAAQsB,EAAMK,QAAQC,KACtBS,gBAAiBf,EAAMgB,QAAQC,UAAUnD,MAE3CS,KAAM,CACJ2B,MAAO,OACPQ,UAAWV,EAAMK,QAAQC,MAE3BV,OAAQ,CACNc,UAAgC,EAArBV,EAAMK,QAAQC,QA0EdP,CAAmBpE,GC5GnBuF,MARf,WACE,OACE1D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BCWSyD,MAXf,WACE,OACE3D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,KACE5D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASlD,UAAW1C,IACtC6B,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAOE,KAAK,QAAQlD,UAAW6C,OCEnBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtE,EAAAC,EAAAC,cAACqE,EAAD,MAAYC,SAASC,eAAe,SD2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlF,KAAK,SAAAmF,GACjCA,EAAaC","file":"static/js/main.fd9f5e24.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport withStyles from '@material-ui/core/styles/withStyles';\n\nimport { Redirect } from 'react-router'\n\nconst styles = theme => ({\n  main: {\n    width: 'auto',\n    display: 'block', // Fix IE 11 issue.\n    marginLeft: theme.spacing.unit * 3,\n    marginRight: theme.spacing.unit * 3,\n    [theme.breakpoints.up(400 + theme.spacing.unit * 3 * 2)]: {\n      width: 400,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n    },\n  },\n  paper: {\n    marginTop: theme.spacing.unit * 8,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: `${theme.spacing.unit * 2}px ${theme.spacing.unit * 3}px ${theme.spacing.unit * 3}px`,\n  },\n  avatar: {\n    margin: theme.spacing.unit,\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing.unit,\n  },\n  submit: {\n    marginTop: theme.spacing.unit * 3,\n  },\n});\n\nclass SignIn extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { redirectToReferrer: false };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const data = new FormData(event.target);\n\n    fetch('/api/login', {\n      method: 'POST',\n      body: data,\n    }).then(\n      response => response.status\n    ).then(status => {\n      if(status===200) {\n        this.setState({ redirectToReferrer: true });\n      }else{\n        alert(\"Fail!\")\n      }\n    });\n  }\n\n  render() {\n    const { classes } = this.props;\n    if(this.state.redirectToReferrer) return <Redirect to=\"/feed\" />;\n    return (\n      <main className={classes.main}>\n        <CssBaseline />\n        <Paper className={classes.paper}>\n          <Avatar className={classes.avatar}>\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <form className={classes.form} onSubmit={this.handleSubmit}>\n            <FormControl margin=\"normal\" required fullWidth>\n              <InputLabel htmlFor=\"email\">Email Address</InputLabel>\n              <Input id=\"email\" name=\"email\" autoComplete=\"email\" autoFocus />\n            </FormControl>\n            <FormControl margin=\"normal\" required fullWidth>\n              <InputLabel htmlFor=\"password\">Password</InputLabel>\n              <Input name=\"password\" type=\"password\" id=\"password\" autoComplete=\"current-password\" />\n            </FormControl>\n            <FormControlLabel\n              control={<Checkbox value=\"remember\" color=\"primary\" />}\n              label=\"Remember me\"\n            />\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n            >\n              Sign in\n            </Button>\n          </form>\n        </Paper>\n      </main>\n    );\n  }\n}\n\nSignIn.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SignIn);\n","import React from 'react';\n\nfunction Feed() {\n  return (\n    <div>\n      <h1>Successful</h1>\n    </div>\n  )\n}\n\nexport default Feed;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport SignIn from './components/user/login'\nimport Feed from './components/user/feed'\n\nfunction Routes() {\n  return (\n    <Router>\n      <div>\n        <Route exact path=\"/login\" component={SignIn} />\n        <Route path=\"/feed\" component={Feed} />\n      </div>\n    </Router>\n  )\n}\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}